{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todolist","length","map","todo","class","key","id","onClick","content","className","AddTodo","state","taskChange","e","Math","random","setState","target","value","submitForm","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAoBeA,EAlBD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACbC,EAAWF,EAAMG,OAEnBH,EAAMI,KAAI,SAAAC,GACN,OAAO,yBAAKC,MAAM,kBAAkBC,IAAKF,EAAKG,GAAIC,QAAS,WAAKR,EAAWI,EAAKG,MAC3EH,EAAKK,YAId,uBAAGJ,MAAM,UAAT,yCAEJ,OACI,yBAAKK,UAAU,uBAAuBH,GAAG,YACpCN,ICgBEU,E,4MA5BXC,MAAQ,CACJL,GAAI,KACJE,QAAS,I,EAEbI,WAAa,SAACC,GACV,IAAMP,EAAKQ,KAAKC,SAChB,EAAKC,SAAS,CACVV,KACAE,QAASK,EAAEI,OAAOC,S,EAG1BC,WAAa,SAACN,GACVA,EAAEO,iBACF,EAAKC,MAAMC,QAAQ,EAAKX,OACxB,EAAKK,SAAS,CACVR,QAAS,M,uDAIb,OACI,0BAAMF,GAAG,UAAUiB,SAAUC,KAAKL,YAC9B,6CACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKZ,WAAYM,MAAQM,KAAKb,MAAMH,e,GAvB3DmB,aCsDPC,E,4MAnDbjB,MAAQ,CACNb,MAAO,CAAC,CACNQ,GAAI,EACJE,QAAS,uBACR,CACDF,GAAI,EACJE,QAAS,kBACR,CACDF,GAAI,EACJE,QAAS,UACR,CACDF,GAAI,EACJE,QAAS,WACR,CACDF,GAAI,EACJE,QAAS,WACR,CACDF,GAAI,EACJE,QAAS,WACR,CACDF,GAAI,EACJE,QAAS,qB,EAIbT,WAAa,SAACO,GACZ,IAAMR,EAAQ,EAAKa,MAAMb,MAAM+B,QAAO,SAAA1B,GACpC,OAAOA,EAAKG,IAAMA,KAEpB,EAAKU,SAAS,CACZlB,W,EAGJwB,QAAU,SAACnB,GACT,IAAML,EAAK,sBAAO,EAAKa,MAAMb,OAAlB,CAAyBK,IACpC,EAAKa,SAAS,CACZlB,W,uDAKF,OACE,yBAAKW,UAAU,yBAAyBH,GAAG,aACzC,wBAAIG,UAAU,uDAAuDH,GAAG,UAAxE,IAAkF,6CAAlF,KACA,kBAAC,EAAD,CAAOR,MAAO0B,KAAKb,MAAMb,MAAOC,WAAYyB,KAAKzB,aACjD,kBAAC,EAAD,CAASuB,QAASE,KAAKF,e,GA9CbK,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.41b81f99.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n    const todolist = todos.length ?\r\n    (\r\n        todos.map(todo => {\r\n            return <div class=\"collection-item\" key={todo.id} onClick={()=>{deleteTodo(todo.id)}}>\r\n                {todo.content}\r\n            </div> \r\n        })\r\n    ):(\r\n        <p class=\"center\"> Wala kang gawain ngayon, lagi naman </p>\r\n    );\r\n    return( \r\n        <div className=\"collection z-depth-3\" id=\"todolist\"> \r\n            {todolist}\r\n        </div>\r\n     );   \r\n}\r\n\r\nexport default Todos;","import React, {Component} from 'react';\r\n\r\nclass AddTodo extends Component{\r\n    state = {\r\n        id: null,\r\n        content: \"\"\r\n    }\r\n    taskChange = (e) => {\r\n        const id = Math.random();\r\n        this.setState({\r\n            id,\r\n            content: e.target.value\r\n        })\r\n    }\r\n    submitForm = (e) => {\r\n        e.preventDefault();      \r\n        this.props.addTodo(this.state)\r\n        this.setState({\r\n            content: \"\"\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <form id=\"NewTask\" onSubmit={this.submitForm}>\r\n                <label> New Task </label>\r\n                <input type=\"text\" onChange={this.taskChange} value= {this.state.content}/> \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, {Component} from 'react';\r\nimport Todos from './Todos';\r\nimport AddTodo from './AddTodo';\r\n\r\nclass App extends Component{\r\n  state = {    \r\n    todos: [{\r\n      id: 1,\r\n      content: \"Maghugas ng pinggan\"\r\n    }, {\r\n      id: 2,\r\n      content: \"Magpakabatugan\"\r\n    }, {      \r\n      id: 3,\r\n      content: \"Kumain\"\r\n    }, {      \r\n      id: 4,\r\n      content: \"Matulog\"\r\n    }, {      \r\n      id: 5,\r\n      content: \"Maglaba\"\r\n    }, {      \r\n      id: 6,\r\n      content: \"Maglaro\"\r\n    }, {      \r\n      id: 7,\r\n      content: \"Kumain maghapon\"\r\n    }\r\n    ] \r\n  }\r\n  deleteTodo = (id) => {\r\n    const todos = this.state.todos.filter(todo =>{\r\n      return todo.id != id;\r\n    });    \r\n    this.setState({\r\n      todos\r\n    })\r\n  }\r\n  addTodo = (todo) => {\r\n    const todos = [...this.state.todos, todo];\r\n    this.setState({\r\n      todos\r\n    })        \r\n\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"todo-content container\" id=\"container\">\r\n        <h1 className=\"center white-text card-panel teal darken-2 z-depth-3\" id=\"header\"> <span> Todo List </span> </h1>\r\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo}/>\r\n        <AddTodo addTodo={this.addTodo}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}